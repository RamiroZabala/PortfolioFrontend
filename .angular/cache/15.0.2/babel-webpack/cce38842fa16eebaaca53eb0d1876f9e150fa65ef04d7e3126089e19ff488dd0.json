{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nlet InterceptorService = class InterceptorService {\n  constructor(autenticationService) {\n    this.autenticationService = autenticationService;\n  }\n  intercept(req, next) {\n    var currentUser = this.autenticationService.usuarioAutenticado;\n    if (currentUser && currentUser.accessToken) {\n      req = req.clone({\n        setHeaders: {\n          Authorization: 'Bearer ${currentUser.accessToken}'\n        }\n      });\n    }\n    console.log(\"Interceptor esta corriendo \" + JSON.stringify(currentUser));\n    return next.handle(req);\n  }\n};\nInterceptorService = __decorate([Injectable({\n  providedIn: 'root'\n})], InterceptorService);\nexport { InterceptorService };","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AASnC,IAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAE7BC,YAAoBC,oBAA8C;IAA9C,yBAAoB,GAApBA,oBAAoB;EAA8B;EACtEC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAEhD,IAAIC,WAAW,GAAC,IAAI,CAACJ,oBAAoB,CAACK,kBAAkB;IAC5D,IAAGD,WAAW,IAAIA,WAAW,CAACE,WAAW,EAAC;MACxCJ,GAAG,GAACA,GAAG,CAACK,KAAK,CAAC;QACZC,UAAU,EAAC;UACTC,aAAa,EAAE;;OAElB,CAAC;;IAEJC,OAAO,CAACC,GAAG,CAAC,6BAA6B,GAACC,IAAI,CAACC,SAAS,CAACT,WAAW,CAAC,CAAC;IACtE,OAAOD,IAAI,CAACW,MAAM,CAACZ,GAAG,CAAC;EACzB;CACD;AAhBYJ,kBAAkB,eAH9BD,UAAU,CAAC;EACVkB,UAAU,EAAE;CACb,CAAC,GACWjB,kBAAkB,CAgB9B;SAhBYA,kBAAkB","names":["Injectable","InterceptorService","constructor","autenticationService","intercept","req","next","currentUser","usuarioAutenticado","accessToken","clone","setHeaders","Authorization","console","log","JSON","stringify","handle","providedIn"],"sourceRoot":"","sources":["/home/ramiro/Documentos/Portfolio/Frontend/src/app/services/interceptor.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AuthenticationService } from 'src/app/services/authentication-data.service';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InterceptorService implements HttpInterceptor{\n\n  constructor(private autenticationService:AuthenticationDataService) { }\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    \n    var currentUser=this.autenticationService.usuarioAutenticado;\n    if(currentUser && currentUser.accessToken){\n      req=req.clone({\n        setHeaders:{\n          Authorization: 'Bearer ${currentUser.accessToken}'\n        }\n      })\n    }\n    console.log(\"Interceptor esta corriendo \"+JSON.stringify(currentUser))\n    return next.handle(req);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}