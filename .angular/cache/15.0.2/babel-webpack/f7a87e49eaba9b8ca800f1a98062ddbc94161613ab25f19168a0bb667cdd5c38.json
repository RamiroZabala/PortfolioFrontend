{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/authentication-data.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nconst _c0 = [\"submitButtonLogin\"];\nfunction LoginComponent_div_12_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 16);\n    i0.ɵɵtext(1, \" El email es requerido \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_12_p_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 16);\n    i0.ɵɵtext(1, \" El formato del email es incorrecto \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, LoginComponent_div_12_p_1_Template, 2, 0, \"p\", 15);\n    i0.ɵɵtemplate(2, LoginComponent_div_12_p_2_Template, 2, 0, \"p\", 15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.Email == null ? null : ctx_r0.Email.hasError(\"required\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.Email == null ? null : ctx_r0.Email.hasError(\"email\"));\n  }\n}\nfunction LoginComponent_div_17_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 16);\n    i0.ɵɵtext(1, \" La contrases\\u00F1a es requerida \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_17_p_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 16);\n    i0.ɵɵtext(1, \" La contrase\\u00F1a debe tener al menos 8 car\\u00E1cteres \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, LoginComponent_div_17_p_1_Template, 2, 0, \"p\", 15);\n    i0.ɵɵtemplate(2, LoginComponent_div_17_p_2_Template, 2, 0, \"p\", 15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.Password == null ? null : ctx_r1.Password.hasError(\"required\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.Password == null ? null : ctx_r1.Password.errors == null ? null : ctx_r1.Password.errors[\"minlength\"]);\n  }\n}\nconst _c1 = function (a0, a1) {\n  return {\n    \"is-invalid\": a0,\n    \"is-valid\": a1\n  };\n};\nexport class LoginComponent {\n  constructor(formBuilder, dataService, ruta) {\n    this.formBuilder = formBuilder;\n    this.dataService = dataService;\n    this.ruta = ruta;\n    this.submitDisable = false;\n    this.errorMessage = 'Credenciales Incorrectas. Intente nuevamente';\n    this.Form = this.formBuilder.group({\n      email: [\"\", [Validators.required, Validators.email]],\n      password: [\"\", [Validators.required, Validators.minLength(8)]],\n      deviceInfo: this.formBuilder.group({\n        deviceId: [\"\"],\n        deviceType: [\"DEVICE_TYPE_ANDROID\"],\n        notificationToken: [\"\"]\n      })\n    });\n  }\n  get Email() {\n    return this.Form.get(\"email\");\n  }\n  get Password() {\n    return this.Form.get(\"password\");\n  }\n  get FormValid() {\n    return !this.Form.get(\"email\")?.errors && !this.Form.get(\"password\")?.errors;\n  }\n  login(event) {\n    event.preventDefault();\n    if (this.submitButton) {\n      this.submitDisable = true;\n      this.submitButton.nativeElement.innerHTML = '<div class=\"spinner-border text-light\" role=\"status\"><span class=\"visually-hidden\">Loading...</span></div>';\n    }\n    const creds = {\n      email: this.Form.get('email')?.value,\n      password: this.Form.get('password')?.value\n    };\n    this.dataService.logIn(creds).subscribe(data => {\n      console.log(\"DATA:\" + JSON.stringify(data));\n      this.ruta.navigate(['/']);\n    }, error => {\n      console.log(\"Error al autenticar:\", error);\n      //this.errorMessage = error.error.message;\n      this.submitDisable = false; // habilitar el botón de enviar\n      //this.submitButton.nativeElement.innerHTML = 'Iniciar sesión'; // actualizar el texto del botón\n    });\n  }\n  static #_ = this.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthenticationDataService), i0.ɵɵdirectiveInject(i3.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    viewQuery: function LoginComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.submitButton = _t.first);\n      }\n    },\n    decls: 21,\n    vars: 12,\n    consts: [[\"id\", \"signinModal\", \"tabindex\", \"-1\", \"aria-labelledby\", \"signinModalLabel\", \"aria-hidden\", \"true\", 1, \"modal\", \"fade\"], [1, \"modal-dialog\", \"modal-dialog-centered\"], [1, \"modal-content\"], [1, \"modal-header\"], [\"id\", \"signinModalLabel\", 1, \"modal-title\", \"fs-5\"], [1, \"modal-body\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-outline\", \"mb-4\"], [\"for\", \"signin-form-email\", 1, \"form-label\"], [\"formControlName\", \"email\", \"type\", \"email\", \"id\", \"signin-form-email\", 1, \"form-control\", 3, \"ngClass\"], [4, \"ngIf\"], [\"for\", \"signin-form-password\", 1, \"form-label\"], [\"formControlName\", \"password\", \"type\", \"password\", \"id\", \"signin-form-password\", \"minlength\", \"8\", 1, \"form-control\", 3, \"ngClass\"], [\"type\", \"submit\", 1, \"button\", \"button-full\", \"btnsing\", 3, \"disabled\"], [\"submitButtonLogin\", \"\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [1, \"text-danger\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h1\", 4);\n        i0.ɵɵtext(5, \"Login\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"div\", 5)(7, \"form\", 6);\n        i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_7_listener($event) {\n          return ctx.login($event);\n        });\n        i0.ɵɵelementStart(8, \"div\", 7)(9, \"label\", 8);\n        i0.ɵɵtext(10, \"Email address\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"input\", 9);\n        i0.ɵɵtemplate(12, LoginComponent_div_12_Template, 3, 2, \"div\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"div\", 7)(14, \"label\", 11);\n        i0.ɵɵtext(15, \"Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(16, \"input\", 12);\n        i0.ɵɵtemplate(17, LoginComponent_div_17_Template, 3, 2, \"div\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"button\", 13, 14);\n        i0.ɵɵtext(20, \"Login\");\n        i0.ɵɵelementEnd()()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"formGroup\", ctx.Form);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(6, _c1, (ctx.Email == null ? null : ctx.Email.errors) && (ctx.Email == null ? null : ctx.Email.touched), (ctx.Email == null ? null : ctx.Email.errors) && (ctx.Email == null ? null : ctx.Email.touched)));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (ctx.Email == null ? null : ctx.Email.errors) && (ctx.Email == null ? null : ctx.Email.touched));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(9, _c1, (ctx.Password == null ? null : ctx.Password.errors) && (ctx.Password == null ? null : ctx.Password.touched), (ctx.Password == null ? null : ctx.Password.errors) && (ctx.Password == null ? null : ctx.Password.touched)));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (ctx.Password == null ? null : ctx.Password.errors) && (ctx.Password == null ? null : ctx.Password.touched));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", !ctx.FormValid || ctx.submitDisable);\n      }\n    },\n    dependencies: [i4.NgClass, i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MinLengthValidator, i1.FormGroupDirective, i1.FormControlName],\n    encapsulation: 2\n  });\n}","map":{"version":3,"mappings":"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","names":["Validators","i0","LoginComponent","constructor","formBuilder","dataService","ruta","Form","group","email","required","password","minLength","deviceInfo","deviceId","deviceType","notificationToken","Email","get","Password","FormValid","errors","login","event","preventDefault","submitButton","submitDisable","nativeElement","innerHTML","creds","value","logIn","subscribe","data","console","log","JSON","stringify","navigate","error","selectors","viewQuery","ctx"],"sourceRoot":"","sources":["/home/ramiro/Documentos/Portfolio/Frontend/src/app/components/modal/login/form-login.component.ts","/home/ramiro/Documentos/Portfolio/Frontend/src/app/components/modal/login/form-login.component.html"],"sourcesContent":["import { Component, ElementRef, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms'; \nimport { Router } from '@angular/router';\nimport { Credentials } from 'src/app/models/auth-model';\nimport { AuthenticationDataService } from 'src/app/services/authentication-data.service';\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './form-login.component.html'\n})\nexport class LoginComponent{\n\n  @ViewChild('submitButtonLogin') submitButton: ElementRef<HTMLButtonElement> | undefined;\n\n\n  Form:FormGroup;\n  submitDisable:Boolean = false;\n  errorMessage: string = 'Credenciales Incorrectas. Intente nuevamente';\n\n  constructor(\n  private formBuilder:FormBuilder,\n  private dataService:AuthenticationDataService,\n  private ruta:Router){\n \n\n    this.Form=this.formBuilder.group(\n      {\n        email:[\"\",[Validators.required,Validators.email]],\n        password:[\"\",[Validators.required,Validators.minLength(8)]],\n        deviceInfo:this.formBuilder.group({\n          deviceId:[\"\"],\n          deviceType:[\"DEVICE_TYPE_ANDROID\"],\n          notificationToken:[\"\"]\n        })\n      }\n    )\n  }\n\n  get Email(){\n    return this.Form.get(\"email\");\n  }\n  get Password(){\n    return this.Form.get(\"password\");\n  }\n  get FormValid(){\n    return (!this.Form.get(\"email\")?.errors && !this.Form.get(\"password\")?.errors);\n  }\n\n  login(event:Event){\n    event.preventDefault();\n\n    if (this.submitButton) {\n      this.submitDisable = true;\n      this.submitButton.nativeElement.innerHTML = '<div class=\"spinner-border text-light\" role=\"status\"><span class=\"visually-hidden\">Loading...</span></div>';\n    }\n\n    const creds:Credentials = {\n      email: this.Form.get('email')?.value,\n      password:this.Form.get('password')?.value\n    }\n\n    this.dataService.logIn(creds).subscribe((data:any)=>{\n      console.log(\"DATA:\" + JSON.stringify(data));\n      this.ruta.navigate(['/']);\n    },\n    (error:any) => { // manejar el error\n      console.log(\"Error al autenticar:\", error);\n      //this.errorMessage = error.error.message;\n      this.submitDisable = false; // habilitar el botón de enviar\n      //this.submitButton.nativeElement.innerHTML = 'Iniciar sesión'; // actualizar el texto del botón\n    })\n\n  }\n}\n","<div class=\"modal fade\" id=\"signinModal\" tabindex=\"-1\" aria-labelledby=\"signinModalLabel\" aria-hidden=\"true\">\n    <div class=\"modal-dialog modal-dialog-centered\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <h1 class=\"modal-title fs-5\" id=\"signinModalLabel\">Login</h1>\n          <!--button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button-->\n        </div>\n        <div class=\"modal-body\">\n            <form [formGroup]=\"Form\" (ngSubmit)=\"login($event)\"> \n                <!-- Email -->\n                <div class=\"form-outline mb-4\">\n                    <label class=\"form-label\" for=\"signin-form-email\">Email address</label>\n                    <input\n                        formControlName=\"email\" type=\"email\" id=\"signin-form-email\" class=\"form-control\"\n                        [ngClass]=\"{'is-invalid': Email?.errors && Email?.touched, 'is-valid':Email?.errors && Email?.touched}\"\n                    >\n                    <div *ngIf=\"Email?.errors && Email?.touched\">\n                        <p *ngIf=\"Email?.hasError('required')\" class=\"text-danger\">\n                            El email es requerido\n                        </p>\n                        <p *ngIf=\"Email?.hasError('email')\" class=\"text-danger\">\n                            El formato del email es incorrecto\n                        </p>\n                    </div>\n                </div>\n                <!-- Password -->\n                <div class=\"form-outline mb-4\">\n                    <label class=\"form-label\" for=\"signin-form-password\">Password</label>\n                    <input \n                        formControlName=\"password\" type=\"password\" id=\"signin-form-password\" class=\"form-control\"\n                        [ngClass]=\"{'is-invalid': Password?.errors && Password?.touched, 'is-valid':Password?.errors && Password?.touched}\"\n                        minlength=\"8\"\n                    >\n                    <div *ngIf=\"Password?.errors && Password?.touched\">\n                        <p *ngIf=\"Password?.hasError('required')\" class=\"text-danger\">\n                            La contrasesña es requerida\n                        </p>\n                        <!--error video 21:17 https://argentinaprograma.inti.gob.ar/mod/page/view.php?id=2689&forceview=1-->\n                        <p *ngIf=\"Password?.errors?.['minlength']\" class=\"text-danger\">\n                            La contraseña debe tener al menos 8 carácteres\n                        </p>\n                    </div>\n                </div>\n                <!-- Submit -->\n                <button [disabled]=\"!FormValid||submitDisable\" #submitButtonLogin type=\"submit\" class=\"button button-full btnsing\" >Login</button>\n            </form>\n        </div>\n      </div>\n    </div>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}