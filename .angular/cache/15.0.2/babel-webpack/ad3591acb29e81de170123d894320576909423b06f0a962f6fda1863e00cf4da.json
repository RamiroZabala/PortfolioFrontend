{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { FormGroup, Validators } from '@angular/forms';\nlet FormSkillComponent = class FormSkillComponent {\n  //\n  constructor(formBuilder, dataService) {\n    this.formBuilder = formBuilder;\n    this.dataService = dataService;\n    this.category = \"\";\n    this.type = \"\";\n    this.categoryDisabled = true;\n    //\n    this.modalId = \"skillModal\";\n    this.modalTitle = \"Agregar Educaci贸n\";\n    this.modalSubmitText = \"Guardar\";\n    // DEFAULTS FORM INPUTS VALUES\n    this.entryId = -1;\n    this.skillname = \"\";\n    this.value = 100;\n    //\n    this.reloadHTML = () => {}; // inicializaci贸n por defecto\n    this.Form = new FormGroup({});\n    this.selectOptions = [];\n  }\n  //\n  ngOnInit() {\n    if (this.type === \"HARD\") {\n      this.selectOptions = [{\n        label: 'Frontend',\n        value: 'Frontend'\n      }, {\n        label: 'Backend',\n        value: 'Backend'\n      }, {\n        label: 'Others',\n        value: 'Others'\n      }];\n    } else {\n      this.selectOptions = [{\n        label: 'Soft',\n        value: 'Soft'\n      }, {\n        label: 'Language',\n        value: 'Language'\n      }];\n    }\n    if (this.category) {\n      this.category = this.category.trim();\n    } else {\n      this.category = 'Others';\n    }\n    if (this.type) {\n      this.type = this.type.trim();\n    } else {\n      this.type = 'SOFT';\n    }\n    this.Form = this.formBuilder.group({\n      //aca.....\n      form_skillname: [this.skillname, [Validators.required]],\n      form_category: [{\n        value: this.category,\n        disabled: this.categoryDisabled\n      }, [Validators.required]],\n      form_value: [this.value, [Validators.required, Validators.maxLength]],\n      //\n      deviceInfo: this.formBuilder.group({\n        deviceId: [\"\"],\n        deviceType: [\"DEVICE_TYPE_ANDROID\"],\n        notificationToken: [\"\"]\n      })\n    });\n  }\n  //\n  get SkillName() {\n    return this.Form.get(\"form_skillname\");\n  }\n  get Category() {\n    return this.Form.get(\"form_category\");\n  }\n  get Value() {\n    return this.Form.get(\"form_value\");\n  }\n  get FormValid() {\n    return !this.Form.get(\"form_skillname\")?.errors && !this.Form.get(\"form_category\")?.errors && !this.Form.get(\"form_value\")?.errors;\n  }\n  //\n  onSend(event) {\n    event.preventDefault();\n    const body = {\n      id: this.entryId,\n      skillname: this.Form.get('form_skillname')?.value,\n      category: this.Form.get('form_category')?.value,\n      value: this.Form.get('form_value')?.value\n    };\n    if (this.type === \"HARD\") {\n      this.dataService.addHardSkill(body).subscribe(data => {\n        console.log(\"DATA:\" + JSON.stringify(data));\n        this.reloadHTML();\n      });\n    } else {\n      this.dataService.addSoftSkill(body).subscribe(data => {\n        console.log(\"DATA:\" + JSON.stringify(data));\n        this.reloadHTML();\n      });\n    }\n  }\n};\n__decorate([Input()], FormSkillComponent.prototype, \"category\", void 0);\n__decorate([Input()], FormSkillComponent.prototype, \"type\", void 0);\n__decorate([Input()], FormSkillComponent.prototype, \"categoryDisabled\", void 0);\n__decorate([Input()], FormSkillComponent.prototype, \"modalId\", void 0);\n__decorate([Input()], FormSkillComponent.prototype, \"modalTitle\", void 0);\n__decorate([Input()], FormSkillComponent.prototype, \"modalSubmitText\", void 0);\n__decorate([Input()], FormSkillComponent.prototype, \"entryId\", void 0);\n__decorate([Input()], FormSkillComponent.prototype, \"skillname\", void 0);\n__decorate([Input()], FormSkillComponent.prototype, \"value\", void 0);\n__decorate([Input()], FormSkillComponent.prototype, \"reloadHTML\", void 0);\nFormSkillComponent = __decorate([Component({\n  selector: 'app-form-skill',\n  templateUrl: './form-skill.component.html'\n})], FormSkillComponent);\nexport { FormSkillComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAUC,KAAK,QAAQ,eAAe;AACxD,SAAsBC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;AAU5D,IAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAkB7B;EACAC,YACUC,WAAuB,EACvBC,WAA4B;IAD5B,gBAAW,GAAXD,WAAW;IACX,gBAAW,GAAXC,WAAW;IApBZ,aAAQ,GAAU,EAAE;IACpB,SAAI,GAAU,EAAE;IAChB,qBAAgB,GAAW,IAAI;IACxC;IACS,YAAO,GAAG,YAAY;IACtB,eAAU,GAAG,mBAAmB;IAChC,oBAAe,GAAG,SAAS;IACpC;IACS,YAAO,GAAU,CAAC,CAAC;IACnB,cAAS,GAAU,EAAE;IACrB,UAAK,GAAU,GAAG;IAC3B;IACS,eAAU,GAAc,MAAK,CAAE,CAAC,CAAC,CAAC;IAE3C,SAAI,GAAa,IAAIL,SAAS,CAAC,EAAE,CAAC;IAClC,kBAAa,GAA4C,EAAE;EAKnB;EACxC;EACAM,QAAQ;IACJ,IAAG,IAAI,CAACC,IAAI,KAAG,MAAM,EAAC;MACpB,IAAI,CAACC,aAAa,GAAG,CACnB;QAAEC,KAAK,EAAE,UAAU;QAAEC,KAAK,EAAE;MAAU,CAAE,EACxC;QAAED,KAAK,EAAE,SAAS;QAAEC,KAAK,EAAE;MAAS,CAAE,EACtC;QAAED,KAAK,EAAE,QAAQ;QAAEC,KAAK,EAAE;MAAQ,CAAE,CACrC;KACF,MACG;MACF,IAAI,CAACF,aAAa,GAAG,CACnB;QAAEC,KAAK,EAAE,MAAM;QAAEC,KAAK,EAAE;MAAM,CAAE,EAChC;QAAED,KAAK,EAAE,UAAU;QAAEC,KAAK,EAAE;MAAU,CAAE,CACzC;;IAEH,IAAI,IAAI,CAACC,QAAQ,EAAE;MAAC,IAAI,CAACA,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACC,IAAI,EAAE;KAAE,MAAM;MAAC,IAAI,CAACD,QAAQ,GAAG,QAAQ;;IACzF,IAAI,IAAI,CAACJ,IAAI,EAAE;MAAC,IAAI,CAACA,IAAI,GAAG,IAAI,CAACA,IAAI,CAACK,IAAI,EAAE;KAAE,MAAM;MAAC,IAAI,CAACL,IAAI,GAAG,MAAM;;IACvE,IAAI,CAACM,IAAI,GAAC,IAAI,CAACT,WAAW,CAACU,KAAK,CAC9B;MACE;MACAC,cAAc,EAAC,CAAC,IAAI,CAACC,SAAS,EAAwB,CAACf,UAAU,CAACgB,QAAQ,CAAC,CAAC;MAC5EC,aAAa,EAAC,CAAC;QAACR,KAAK,EAAC,IAAI,CAACC,QAAQ;QAAEQ,QAAQ,EAAE,IAAI,CAACC;MAAgB,CAAC,EAAE,CAACnB,UAAU,CAACgB,QAAQ,CAAC,CAAC;MAC7FI,UAAU,EAAC,CAAC,IAAI,CAACX,KAAK,EAAgC,CAACT,UAAU,CAACgB,QAAQ,EAAEhB,UAAU,CAACqB,SAAS,CAAC,CAAC;MAClG;MACAC,UAAU,EAAC,IAAI,CAACnB,WAAW,CAACU,KAAK,CAAC;QAACU,QAAQ,EAAC,CAAC,EAAE,CAAC;QAAEC,UAAU,EAAC,CAAC,qBAAqB,CAAC;QAAEC,iBAAiB,EAAC,CAAC,EAAE;OAC1G;KACF,CACF;EACL;EACA;EACA,IAAIC,SAAS;IACX,OAAO,IAAI,CAACd,IAAI,CAACe,GAAG,CAAC,gBAAgB,CAAC;EACxC;EACA,IAAIC,QAAQ;IACV,OAAO,IAAI,CAAChB,IAAI,CAACe,GAAG,CAAC,eAAe,CAAC;EACvC;EACA,IAAIE,KAAK;IACP,OAAO,IAAI,CAACjB,IAAI,CAACe,GAAG,CAAC,YAAY,CAAC;EACpC;EACA,IAAIG,SAAS;IACX,OAAQ,CAAC,IAAI,CAAClB,IAAI,CAACe,GAAG,CAAC,gBAAgB,CAAC,EAAEI,MAAM,IAAI,CAAC,IAAI,CAACnB,IAAI,CAACe,GAAG,CAAC,eAAe,CAAC,EAAEI,MAAM,IAAI,CAAC,IAAI,CAACnB,IAAI,CAACe,GAAG,CAAC,YAAY,CAAC,EAAEI,MAAM;EACrI;EACA;EACAC,MAAM,CAACC,KAAW;IAChBA,KAAK,CAACC,cAAc,EAAE;IACtB,MAAMC,IAAI,GAAS;MACjBC,EAAE,EAAC,IAAI,CAACC,OAAO;MACftB,SAAS,EAAC,IAAI,CAACH,IAAI,CAACe,GAAG,CAAC,gBAAgB,CAAC,EAAElB,KAAK;MAChDC,QAAQ,EAAC,IAAI,CAACE,IAAI,CAACe,GAAG,CAAC,eAAe,CAAC,EAAElB,KAAK;MAC9CA,KAAK,EAAC,IAAI,CAACG,IAAI,CAACe,GAAG,CAAC,YAAY,CAAC,EAAElB;KAAO;IAC5C,IAAG,IAAI,CAACH,IAAI,KAAG,MAAM,EAAC;MACpB,IAAI,CAACF,WAAW,CAACkC,YAAY,CAACH,IAAI,CAAC,CAACI,SAAS,CAAEC,IAAQ,IAAG;QACxDC,OAAO,CAACC,GAAG,CAAC,OAAO,GAAGC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC;QAC3C,IAAI,CAACK,UAAU,EAAE;MACnB,CAAC,CAAC;KACH,MACI;MACH,IAAI,CAACzC,WAAW,CAAC0C,YAAY,CAACX,IAAI,CAAC,CAACI,SAAS,CAAEC,IAAQ,IAAG;QACxDC,OAAO,CAACC,GAAG,CAAC,OAAO,GAAGC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC;QAC3C,IAAI,CAACK,UAAU,EAAE;MACnB,CAAC,CAAC;;EAEN;CACD;AApFUE,YAARjD,KAAK,EAAE,oDAAsB;AACrBiD,YAARjD,KAAK,EAAE,gDAAkB;AACjBiD,YAARjD,KAAK,EAAE,4DAAiC;AAEhCiD,YAARjD,KAAK,EAAE,mDAAwB;AACvBiD,YAARjD,KAAK,EAAE,sDAAkC;AACjCiD,YAARjD,KAAK,EAAE,2DAA6B;AAE5BiD,YAARjD,KAAK,EAAE,mDAAqB;AACpBiD,YAARjD,KAAK,EAAE,qDAAuB;AACtBiD,YAARjD,KAAK,EAAE,iDAAoB;AAEnBiD,YAARjD,KAAK,EAAE,sDAAkC;AAb/BG,kBAAkB,eAN9BJ,SAAS,CAAC;EACTmD,QAAQ,EAAE,gBAAgB;EAC1BC,WAAW,EAAE;CAEd,CAAC,GAEWhD,kBAAkB,CAqF9B;SArFYA,kBAAkB","names":["Component","Input","FormGroup","Validators","FormSkillComponent","constructor","formBuilder","dataService","ngOnInit","type","selectOptions","label","value","category","trim","Form","group","form_skillname","skillname","required","form_category","disabled","categoryDisabled","form_value","maxLength","deviceInfo","deviceId","deviceType","notificationToken","SkillName","get","Category","Value","FormValid","errors","onSend","event","preventDefault","body","id","entryId","addHardSkill","subscribe","data","console","log","JSON","stringify","reloadHTML","addSoftSkill","__decorate","selector","templateUrl"],"sourceRoot":"","sources":["/home/ramiro/Documentos/Portfolio/Frontend/src/app/components/modal/form-skill/form-skill.component.ts"],"sourcesContent":["import { Component, OnInit, Input } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms'; \nimport { SkillDataService } from 'src/app/services/skill-data.service';\nimport { Skill } from 'src/app/models/models';\n\n@Component({\n  selector: 'app-form-skill',\n  templateUrl: './form-skill.component.html'\n\n})\n\nexport class FormSkillComponent implements OnInit{\n  @Input() category:String = \"\";\n  @Input() type:String = \"\";\n  @Input() categoryDisabled:Boolean = true;\n  //\n  @Input() modalId = \"skillModal\";\n  @Input() modalTitle = \"Agregar Educaci贸n\";\n  @Input() modalSubmitText = \"Guardar\";\n  // DEFAULTS FORM INPUTS VALUES\n  @Input() entryId:Number = -1;\n  @Input() skillname:String = \"\";\n  @Input() value:Number = 100;\n  //\n  @Input() reloadHTML: () => any = () => {}; // inicializaci贸n por defecto\n\n  Form:FormGroup = new FormGroup({});;\n  selectOptions: Array<{ label: string, value: string }> = [];\n\n  //\n  constructor(\n    private formBuilder:FormBuilder,\n    private dataService:SkillDataService){}\n  //\n  ngOnInit(): void {\n      if(this.type===\"HARD\"){\n        this.selectOptions = [\n          { label: 'Frontend', value: 'Frontend' },\n          { label: 'Backend', value: 'Backend' },\n          { label: 'Others', value: 'Others' }\n        ];\n      }\n      else{\n        this.selectOptions = [\n          { label: 'Soft', value: 'Soft' },\n          { label: 'Language', value: 'Language' }\n        ]\n      }\n      if (this.category) {this.category = this.category.trim();} else {this.category = 'Others';}\n      if (this.type) {this.type = this.type.trim();} else {this.type = 'SOFT';}\n      this.Form=this.formBuilder.group(\n        {\n          //aca.....\n          form_skillname:[this.skillname,                       [Validators.required]],\n          form_category:[{value:this.category, disabled: this.categoryDisabled}, [Validators.required]],\n          form_value:[this.value,                               [Validators.required, Validators.maxLength]],\n          //\n          deviceInfo:this.formBuilder.group({deviceId:[\"\"], deviceType:[\"DEVICE_TYPE_ANDROID\"], notificationToken:[\"\"]\n          })\n        }\n      )\n  }\n  //\n  get SkillName(){\n    return this.Form.get(\"form_skillname\");\n  }\n  get Category(){\n    return this.Form.get(\"form_category\");\n  }\n  get Value(){\n    return this.Form.get(\"form_value\");\n  }\n  get FormValid(){\n    return (!this.Form.get(\"form_skillname\")?.errors && !this.Form.get(\"form_category\")?.errors && !this.Form.get(\"form_value\")?.errors);\n  }\n  //\n  onSend(event:Event){\n    event.preventDefault();\n    const body:Skill = {\n      id:this.entryId,\n      skillname:this.Form.get('form_skillname')?.value,\n      category:this.Form.get('form_category')?.value,\n      value:this.Form.get('form_value')?.value }\n    if(this.type===\"HARD\"){\n      this.dataService.addHardSkill(body).subscribe((data:any)=>{\n        console.log(\"DATA:\" + JSON.stringify(data));\n        this.reloadHTML();\n      })\n    }\n    else {\n      this.dataService.addSoftSkill(body).subscribe((data:any)=>{\n        console.log(\"DATA:\" + JSON.stringify(data));\n        this.reloadHTML();\n      })\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}