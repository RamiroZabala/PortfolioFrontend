{"ast":null,"code":"import _asyncToGenerator from \"/home/ramiro/Documentos/Portfolio/Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject, catchError, of } from 'rxjs';\nimport { map } from 'rxjs';\nimport { ApiServerUrl } from '../config/config-data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthenticationDataService {\n  constructor(httpC) {\n    this.httpC = httpC;\n    console.log(\"El servicio de autenticacion está corriendo\");\n    this.currentUserSubject = new BehaviorSubject(JSON.parse(sessionStorage.getItem('currentUser') || '{}'));\n  }\n  logIn(creds) {\n    return this.httpC.post(ApiServerUrl.API_SERVER_LOGIN, creds).pipe(map( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (response) {\n        const headers = response.headers;\n        let token = \"TOKEN HERE PLEASE\";\n        try {\n          token = headers.get('Authorization').replace('Bearer ', '');\n        } catch (error) {\n          token = response.token;\n        }\n        localStorage.setItem('token', token);\n        sessionStorage.setItem('session', \"1\");\n        location.reload(); // Recargar la página actual\n        return response;\n      });\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()), catchError(error => {\n      console.log('Error: (authentication-data.service.ts):', error);\n      return error;\n    }));\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  logOut() {\n    return this.httpC.post(ApiServerUrl.API_SERVER_LOGOUT, \"\").pipe(map( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (response) {\n        localStorage.removeItem('token');\n        location.reload(); // Recargar la página actual\n        return response;\n      });\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()), catchError(error => {\n      console.log('Error:', error);\n      return error;\n    }));\n  }\n  isSessionValid() {\n    return this.httpC.get(ApiServerUrl.API_SERVER_SESSIONSTATUS).pipe(map(response => {\n      console.log(\"##############################################3Sesión: \" + response);\n      return response;\n    }), catchError(error => {\n      console.log(\"######################################Error al verificar el estado de la sesión: \", error);\n      return of(false);\n    }));\n  }\n  static #_ = this.ɵfac = function AuthenticationDataService_Factory(t) {\n    return new (t || AuthenticationDataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationDataService,\n    factory: AuthenticationDataService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}