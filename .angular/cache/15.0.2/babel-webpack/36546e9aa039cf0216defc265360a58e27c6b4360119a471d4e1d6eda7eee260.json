{"ast":null,"code":"import _asyncToGenerator from \"/home/ramiro/Documentos/Portfolio/Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs';\nimport { AppConfig } from '../config/api-server';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthenticationDataService {\n  constructor(httpC) {\n    this.httpC = httpC;\n    console.log(\"El servicio de autenticacion está corriendo\");\n    this.currentUserSubject = new BehaviorSubject(JSON.parse(sessionStorage.getItem('currentUser') || '{}'));\n  }\n  /*logIn(credenciales:Credentials):Observable<any>{\n    return this.httpC.post(this.API_SERVER+\"login\", credenciales).pipe(map(data=>{\n      sessionStorage.setItem('currentUser', JSON.stringify(data));\n      this.currentUserSubject.next(data);\n      return data;\n    }))\n  }*/\n  logIn(creds) {\n    return this.httpC.post(AppConfig.API_SERVER_LOGIN, creds).pipe(map( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (response) {\n        let body;\n        try {\n          body = yield response.body.json();\n        } catch (error) {\n          console.error(error);\n          throw new Error(\"Error al parsear la respuesta como JSON\");\n        }\n        const headers = response.headers;\n        let token;\n        const bearerToken = headers.get('Authorization');\n        if (bearerToken) {\n          token = bearerToken.replace('Bearer ', '');\n        } else {\n          token = body.token;\n        }\n        localStorage.setItem('token', token);\n        return body;\n      });\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()));\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  static #_ = this.ɵfac = function AuthenticationDataService_Factory(t) {\n    return new (t || AuthenticationDataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationDataService,\n    factory: AuthenticationDataService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";AAEA,SAASA,eAAe,QAA4C,MAAM;AAC1E,SAASC,GAAG,QAAQ,MAAM;AAE1B,SAASC,SAAS,QAAQ,sBAAsB;;;AAMhD,OAAM,MAAOC,yBAAyB;EAIpCC,YAAoBC,KAAgB;IAAhB,UAAK,GAALA,KAAK;IACvBC,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;IAC1D,IAAI,CAACC,kBAAkB,GAAC,IAAIR,eAAe,CAAMS,IAAI,CAACC,KAAK,CAACC,cAAc,CAACC,OAAO,CAAC,aAAa,CAAC,IAAG,IAAI,CAAC,CAAC;EAC5G;EACA;;;;;;;EAOAC,KAAK,CAACC,KAAiB;IACrB,OAAO,IAAI,CAACT,KAAK,CAACU,IAAI,CAACb,SAAS,CAACc,gBAAgB,EAAEF,KAAK,CAAC,CAACG,IAAI,CAAChB,GAAG;MAAA,6BAAC,WAAOiB,QAAa,EAAI;QAEzF,IAAIC,IAAI;QACR,IAAI;UACFA,IAAI,SAASD,QAAQ,CAACC,IAAI,CAACC,IAAI,EAAE;SAClC,CAAC,OAAOC,KAAK,EAAE;UACdf,OAAO,CAACe,KAAK,CAACA,KAAK,CAAC;UACpB,MAAM,IAAIC,KAAK,CAAC,yCAAyC,CAAC;;QAG5D,MAAMC,OAAO,GAAGL,QAAQ,CAACK,OAAO;QAChC,IAAIC,KAAa;QAEjB,MAAMC,WAAW,GAAGF,OAAO,CAACG,GAAG,CAAC,eAAe,CAAE;QACjD,IAAID,WAAW,EAAE;UACfD,KAAK,GAAGC,WAAW,CAACE,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;SAC3C,MAAM;UACLH,KAAK,GAAGL,IAAI,CAACK,KAAK;;QAGpBI,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,KAAK,CAAC;QAEpC,OAAOL,IAAI;MACb,CAAC;MAAA;QAAA;MAAA;IAAA,IAAC,CAAC;EACL;EACAW,QAAQ;IACN,OAAOF,YAAY,CAAChB,OAAO,CAAC,OAAO,CAAC;EACtC;EAAC;qBA3CUT,yBAAyB;EAAA;EAAA;WAAzBA,yBAAyB;IAAA4B,SAAzB5B,yBAAyB;IAAA6B,YAFxB;EAAM","names":["BehaviorSubject","map","AppConfig","AuthenticationDataService","constructor","httpC","console","log","currentUserSubject","JSON","parse","sessionStorage","getItem","logIn","creds","post","API_SERVER_LOGIN","pipe","response","body","json","error","Error","headers","token","bearerToken","get","replace","localStorage","setItem","getToken","factory","providedIn"],"sourceRoot":"","sources":["/home/ramiro/Documentos/Portfolio/Frontend/src/app/services/authentication-data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';\nimport { BehaviorSubject, catchError, Observable, throwError } from 'rxjs';\nimport { map } from 'rxjs';\nimport { Credentials } from '../models/auth-model';\nimport { AppConfig } from '../config/api-server';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationDataService {\n\n  currentUserSubject: BehaviorSubject<any>;\n\n  constructor(private httpC:HttpClient) {\n    console.log(\"El servicio de autenticacion está corriendo\")\n    this.currentUserSubject=new BehaviorSubject<any>(JSON.parse(sessionStorage.getItem('currentUser')|| '{}'))\n  }\n  /*logIn(credenciales:Credentials):Observable<any>{\n    return this.httpC.post(this.API_SERVER+\"login\", credenciales).pipe(map(data=>{\n      sessionStorage.setItem('currentUser', JSON.stringify(data));\n      this.currentUserSubject.next(data);\n      return data;\n    }))\n  }*/\n  logIn(creds:Credentials):Observable<any>{\n    return this.httpC.post(AppConfig.API_SERVER_LOGIN, creds).pipe(map(async (response: any) => {\n  \n      let body;\n      try {\n        body = await response.body.json();\n      } catch (error) {\n        console.error(error);\n        throw new Error(\"Error al parsear la respuesta como JSON\");\n      }\n  \n      const headers = response.headers;\n      let token: string;\n  \n      const bearerToken = headers.get('Authorization')!;\n      if (bearerToken) {\n        token = bearerToken.replace('Bearer ', '');\n      } else {\n        token = body.token;\n      }\n  \n      localStorage.setItem('token', token);\n  \n      return body;\n    }))\n  }\n  getToken(){\n    return localStorage.getItem('token');\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}