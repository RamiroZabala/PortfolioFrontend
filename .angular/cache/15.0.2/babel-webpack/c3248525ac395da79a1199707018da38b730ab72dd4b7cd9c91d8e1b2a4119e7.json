{"ast":null,"code":"import _asyncToGenerator from \"/home/ramiro/Documentos/Portfolio/Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs';\nimport { AppConfig } from '../config/api-server';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthenticationDataService {\n  constructor(httpC) {\n    this.httpC = httpC;\n    console.log(\"El servicio de autenticacion está corriendo\");\n    this.currentUserSubject = new BehaviorSubject(JSON.parse(sessionStorage.getItem('currentUser') || '{}'));\n  }\n  /*logIn(credenciales:Credentials):Observable<any>{\n    return this.httpC.post(this.API_SERVER+\"login\", credenciales).pipe(map(data=>{\n      sessionStorage.setItem('currentUser', JSON.stringify(data));\n      this.currentUserSubject.next(data);\n      return data;\n    }))\n  }*/\n  logIn(creds) {\n    return this.httpC.post(AppConfig.API_SERVER_LOGIN, creds).pipe(map( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (response) {\n        const body = yield response.json();\n        const headers = response.headers;\n        let token;\n        alert(\"token\");\n        const bearerToken = headers.get('Authorization');\n        if (bearerToken) {\n          token = bearerToken.replace('Bearer ', '');\n        } else {\n          token = body.token;\n        }\n        localStorage.setItem('token', token);\n        return body;\n      });\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()));\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  static #_ = this.ɵfac = function AuthenticationDataService_Factory(t) {\n    return new (t || AuthenticationDataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationDataService,\n    factory: AuthenticationDataService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";AAEA,SAASA,eAAe,QAAoB,MAAM;AAClD,SAASC,GAAG,QAAQ,MAAM;AAE1B,SAASC,SAAS,QAAQ,sBAAsB;;;AAMhD,OAAM,MAAOC,yBAAyB;EAIpCC,YAAoBC,KAAgB;IAAhB,UAAK,GAALA,KAAK;IACvBC,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;IAC1D,IAAI,CAACC,kBAAkB,GAAC,IAAIR,eAAe,CAAMS,IAAI,CAACC,KAAK,CAACC,cAAc,CAACC,OAAO,CAAC,aAAa,CAAC,IAAG,IAAI,CAAC,CAAC;EAC5G;EACA;;;;;;;EAOAC,KAAK,CAACC,KAAiB;IACrB,OAAO,IAAI,CAACT,KAAK,CAACU,IAAI,CAACb,SAAS,CAACc,gBAAgB,EAAEF,KAAK,CAAC,CAACG,IAAI,CAAChB,GAAG;MAAA,6BAAC,WAAOiB,QAAa,EAAI;QAEzF,MAAMC,IAAI,SAASD,QAAQ,CAACE,IAAI,EAAE;QAClC,MAAMC,OAAO,GAAGH,QAAQ,CAACG,OAAO;QAEhC,IAAIC,KAAa;QACjBC,KAAK,CAAC,OAAO,CAAC;QACd,MAAMC,WAAW,GAAGH,OAAO,CAACI,GAAG,CAAC,eAAe,CAAE;QACjD,IAAID,WAAW,EAAE;UACfF,KAAK,GAAGE,WAAW,CAACE,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;SAC3C,MAAM;UACLJ,KAAK,GAAGH,IAAI,CAACG,KAAK;;QAIpBK,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEN,KAAK,CAAC;QAEpC,OAAOH,IAAI;MACb,CAAC;MAAA;QAAA;MAAA;IAAA,IAAC,CAAC;EACL;EACAU,QAAQ;IACN,OAAOF,YAAY,CAACf,OAAO,CAAC,OAAO,CAAC;EACtC;EAAC;qBAtCUT,yBAAyB;EAAA;EAAA;WAAzBA,yBAAyB;IAAA2B,SAAzB3B,yBAAyB;IAAA4B,YAFxB;EAAM","names":["BehaviorSubject","map","AppConfig","AuthenticationDataService","constructor","httpC","console","log","currentUserSubject","JSON","parse","sessionStorage","getItem","logIn","creds","post","API_SERVER_LOGIN","pipe","response","body","json","headers","token","alert","bearerToken","get","replace","localStorage","setItem","getToken","factory","providedIn"],"sourceRoot":"","sources":["/home/ramiro/Documentos/Portfolio/Frontend/src/app/services/authentication-data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs';\nimport { Credentials } from '../models/auth-model';\nimport { AppConfig } from '../config/api-server';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationDataService {\n\n  currentUserSubject: BehaviorSubject<any>;\n\n  constructor(private httpC:HttpClient) {\n    console.log(\"El servicio de autenticacion está corriendo\")\n    this.currentUserSubject=new BehaviorSubject<any>(JSON.parse(sessionStorage.getItem('currentUser')|| '{}'))\n  }\n  /*logIn(credenciales:Credentials):Observable<any>{\n    return this.httpC.post(this.API_SERVER+\"login\", credenciales).pipe(map(data=>{\n      sessionStorage.setItem('currentUser', JSON.stringify(data));\n      this.currentUserSubject.next(data);\n      return data;\n    }))\n  }*/\n  logIn(creds:Credentials):Observable<any>{\n    return this.httpC.post(AppConfig.API_SERVER_LOGIN, creds).pipe(map(async (response: any) => {\n      \n      const body = await response.json();\n      const headers = response.headers;\n\n      let token: string;\n      alert(\"token\");\n      const bearerToken = headers.get('Authorization')!;\n      if (bearerToken) {\n        token = bearerToken.replace('Bearer ', '');\n      } else {\n        token = body.token;\n      }\n\n\n      localStorage.setItem('token', token);\n\n      return body;\n    }))\n  }\n  getToken(){\n    return localStorage.getItem('token');\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}